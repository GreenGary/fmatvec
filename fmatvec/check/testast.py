# This calculates the same as testast.cc with Python sympy
# Use this to generate the reference solution which is used in testast.cc
# to check the correct behaviour of the fmatvec symbolic expressions.

import sympy

a1=sympy.Symbol("a1")
a2=sympy.Symbol("a2")
a3=sympy.Symbol("a3")
v=sympy.Matrix([a1,a2,a3])
a=3
a5=sympy.Symbol("a5")
a6=sympy.Symbol("a6")
a4=sympy.Symbol("a4")
m=sympy.Matrix([[2,a4,3],[4,5,6],[sympy.log(pow(v[0], 3)+v[0]),8,a5+a6]])
_rmv=m*v
norm=sympy.sqrt(_rmv[0]*_rmv[0]+_rmv[1]*_rmv[1]+_rmv[2]*_rmv[2])

parDer00=_rmv[0].diff(v[0])
parDer01=_rmv[0].diff(v[1])
parDer02=_rmv[0].diff(v[2])
parDer10=_rmv[1].diff(v[0])
parDer11=_rmv[1].diff(v[1])
parDer12=_rmv[1].diff(v[2])
parDer20=_rmv[2].diff(v[0])
parDer21=_rmv[2].diff(v[1])
parDer22=_rmv[2].diff(v[2])
norm0=norm.diff(v[0])
norm1=norm.diff(v[1])
norm2=norm.diff(v[2])

print(v[0])
print(v[1])
print(v[2])
print(_rmv[0])
print(_rmv[1])
print(_rmv[2])
print(norm)
print(parDer00)
print(parDer01)
print(parDer02)
print(parDer10)
print(parDer11)
print(parDer12)
print(parDer20)
print(parDer21)
print(parDer22)
print(norm0)
print(norm1)
print(norm2)

norm0=norm0.subs(a1, 3.1)
norm0=norm0.subs(a2, 4.2)
norm0=norm0.subs(a3, 5.3)
norm0=norm0.subs(a4, 6.4)
norm0=norm0.subs(a5, 7.5)
norm0=norm0.subs(a6, 8.6)
norm1=norm1.subs(a1, 3.1)
norm1=norm1.subs(a2, 4.2)
norm1=norm1.subs(a3, 5.3)
norm1=norm1.subs(a4, 6.4)
norm1=norm1.subs(a5, 7.5)
norm1=norm1.subs(a6, 8.6)
norm2=norm2.subs(a1, 3.1)
norm2=norm2.subs(a2, 4.2)
norm2=norm2.subs(a3, 5.3)
norm2=norm2.subs(a4, 6.4)
norm2=norm2.subs(a5, 7.5)
norm2=norm2.subs(a6, 8.6)
print(norm0.evalf())
print(norm1.evalf())
print(norm2.evalf())
